[{"body":"ザ・ブリッジ・シリーズ  フル・ブリッジ（STEP 6） 10レップ2セット（中級者の標準） 夕食前に行った  肩や大腿四頭筋に疲労感がある。背面をもう少し使いたい。脊柱には程よい疲労感。\nザ・ハンドスタンド・プッシュアップ・シリーズ  ローボード・ジャックナイフ・プッシュアップ（番外編・STEP 5の2歩手前） 10レップ2セット 夕食後に行った  壁に椅子を押し付けて固定したほうが良い。\nレスラーブリッジ  首の補強 20秒2セット  起立筋の奥の方にあるふだん動かせていない筋肉を動かすのは、現下の在宅勤務情勢に適しているのではないか？\n","date":"2020-04-09","id":1,"title":"Workout 2020-04-09","url":"/post/workout_20200409/"},{"body":"ザ・プッシュアップ・シリーズ  フル・プッシュアップ（STEP 5） 15レップ2セット（中級者の標準が10*2） 昼食後に行った  2セット目は2秒の伸長を守れなかったかもしれない。手幅も追求したい。書籍の図より幅を広めにとった方が「入る」感覚がある。筋肥大用にアレンジをしても良さそう。\nザ・レッグレイズ・シリーズ  フラット・ストレート・レッグレイズ（STEP 5） 15レップ2セット（=中級者の標準） 就業後に行った  ハムストの柔軟性の問題で若干の抵抗があるものの、フォームを崩さず行うことは可能である。\n","date":"2020-04-06","id":2,"title":"Workout 2020-04-06","url":"/post/workout_20200406/"},{"body":"この記事は書籍に載っている具体的なトレーニング方法を載せるものではない。ググってみたら種目をそのまま載せているような記事も見受けられるが、褒められたものではないと思う。\nジムには行けない 「躊躇なく」と言っていたと言っていたはずの緊急事態宣言は、躊躇の痕跡を我々に見せながら予告された。宣言の宣言。そんな情況とはあまり関係なく主体的にリスクを考えた結果、数週間ジムに行っていない。これを機に以前より気になっていた「プリズナートレーニング」を試してみたいと考えた。まず以下の3冊を読んだ。\n     どういったトレーニングなのか プリズナートレーニング。刺激的な名前と、表紙に描かれたビスケット・オリバのせいでハードコアな印象を受ける。実際にはどうだろうか？\n rep: ストリクトに、フォームを崩さず、1rep ずつを丁寧に。2秒伸長→1秒キープ→2秒収縮→1秒キープ。 set: 2セット程度まで。やりすぎは良くない routine: 「善行」は1日に2種目、週に3日行う step up: 時間をかける、「飛び級」しない、腱や関節に無理をさせない  ずいぶん印象と違うはずだ。\nフリーウェイトとの対比でいえば、例えばベンチプレスよりプッシュアップの方が体幹を使うので、上半身を連携した運動になっている。一事が万事、こういう広範囲な連携を重視しているように思う。\nスロトレ？ 時間をかけ収縮伸長するのはスロトレでは？という人もあるだろう。たぶん基本的には近い。ただしスロトレは3-4秒かけ収縮、ロックせずすぐに3-4秒かけて伸長するものなので、厳密には違う（石井直方『石井直方のトレーニングのヒント』ベースボール・マガジン社）。プリズナートレーニングの方が負荷を大きくする傾向にあると思う。\n背中はどう鍛えるのか？ 基本は鉄棒。公園を彷徨えば、何とか懸垂可能な鉄棒は見つかるはずだ。ただし通報されないよう気をつけよう。\n 公園が無理でも、いまどきは強度に問題のないプルアップ・スタンドが1万円程度で買える。おれも買おうかと考えている。\n筋肥大は狙えるのか？ 番外編が応えていると思う。丁寧な1 rep を、というのが基本なので、中級者までは THE BIG SIX をストリクトに行うのが良さそう。鉄棒で上腕を鍛える方法はなかなか得られない知見だと思う。\n実践してみて まだろくに行っていないが、種目によっては STEP 5 あたりを中級者の標準で行える（本書では初級・中級・上級の標準を reps, sets によって示している）。いきなり「飛び級」をするのは推奨されていないが（上述の通り、時間をかけて進むことが推奨される）、トレーニング経験があれば多少のステップアップは許されるだろう。体感では、ストリクトに行えばジムで得られる「入る感覚」も得ることが出来る。これはジムで指導を受けた経験が生きてるはずだ。\n本書ではトレーニング記録を推奨しているので、 Scrapbox をメモとし、本ブログ上にて公開していく。\n","date":"2020-04-06","id":3,"title":"プリズナートレーニングに入門した","url":"/post/calisthenics/"},{"body":"何ら新規性はないが作業記録として。\nWebIOPi のインストール WebIOPi はラズパイ上の GPIO 、センサ、コンバータなどを Web ブラウザや他のアプリから操作するためのライブラリ（Control, debug, and use your Pi's GPIO, sensors and converters from a web browser or any app）。REST API を用意しているから他のアプリからでも操作できるということだろう。\n  The Raspberry Pi Internet of Things Toolkit - Now in two flavors より\n今回は GPIO を用いないが、 Python のスクリプトを実行できる手軽な環境ということで使うことにした。『カラー図解 最新 Raspberry Pi で学ぶ電子工作 作って動かしてしくみがわかる（ブルーバックス）』でも使い方が書かれているし、デファクト・スタンダードなのだろう。しかし最終バージョンが2015年なので現在の Raspbian で動かすにはパッチを当てる必要がある。\n# ダウンロード $ wget https://sourceforge.net/projects/webiopi/files/WebIOPi-0.7.1.tar.gz $ tar zxvf WebIOPi-0.7.1.tar.gz # パッチをあてる $ cd WebIOPi-0.7.1/ $ wget https://raw.githubusercontent.com/doublebind/raspi/master/webiopi-pi2bplus.patch $ patch -p1 -i webiopi-pi2bplus.patch # インストール $ sudo ./setup.sh # 今回は家庭内で使うから n # y の場合は Weaved IoT Kit がインストールされ、外部ネットワークから利用可能に出来る Do you want to access WebIOPi over Internet ? [y/n] n # systemctl のための設定 $ cd /etc/systemd/system/ $ sudo wget https://raw.githubusercontent.com/doublebind/raspi/master/webiopi.service # 起動 $ sudo systemctl start webiopi http://[ホスト名]:8000 でアクセスし、ユーザ名 webiopi パスワード raspberry で動作を確認出来る。\n実際にスクリプトを書く ファイル配置は以下の通り\npi@rp0:~ $ tree webiopi/ webiopi/ ├── index.html ├── main.js └── scripts └── noise.py 今回は子供の安眠のためのピンクノイズ発生機能を簡易ベビーモニターに追加したいので noise.py となっているが、各自好きにしたらよいだろう。\n作業ディレクトリの追加 $ mkdir webiopi WebIOPi の設定 $ cd /etc/webiopi/ $ sudo vim config # 以下編集内容 # Use doc-root to change default HTML and resource files location #doc-root = /home/pi/webiopi/examples/scripts/macros doc-root = /home/pi/webiopi/ # each sourcefile may have setup, loop and destroy functions and macros #myscript = /home/pi/webiopi/examples/scripts/macros/script.py myscript = /home/pi/webiopi/scripts/noise.py doc-root は html を配置するドキュメントルート、myscript は実際に動作させる Python スクリプトの path。\nindex.html \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Noise\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/webiopi.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;img src=\u0026#34;http://rp0.local:8080/?action=stream\u0026#34; style=\u0026#34;width:100%\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Start\u0026#34; class=\u0026#34;python\u0026#34; onClick=\u0026#34;start()\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Stop\u0026#34; class=\u0026#34;python\u0026#34; onClick=\u0026#34;stop()\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; onClick で main.js の関数を呼ぶ。\nmain.js webiopi() function start() { webiopi().callMacro(\u0026#39;start\u0026#39;); } function stop() { webiopi().callMacro(\u0026#39;stop\u0026#39;); } 各関数が Python の関数（マクロ関数）を呼ぶだけのシンプルなもの。webiopi().callMacro('マクロ関数名', '引数', 'コールバック関数名') という引数を取るが、今回は引数とコールバックを省略した。\nnoise.py import webiopi import subprocess @webiopi.macro def start(): subprocess.run(\u0026#39;pgrep -f play | xargs kill \u0026gt; /dev/null 2\u0026gt;\u0026amp;1\u0026#39;, shell=True) subprocess.Popen(\u0026#39;play -n synth pinknoise \u0026gt; /dev/null 2\u0026gt;\u0026amp;1\u0026#39;, shell=True) @webiopi.macro def stop(): subprocess.run(\u0026#39;pgrep -f play | xargs kill \u0026gt; /dev/null 2\u0026gt;\u0026amp;1\u0026#39;, shell=True) Python3 で書く必要がある。とりあえずピンクノイズの発生については Python がコマンドの終了を待つ必要がないので Popen を使った。@webiopi デコレータはブラウザから実行可能にするために必要である。\nplay コマンドは Linux で音声の加工をするための Sox をインストールしたら使える。インストールコマンドは\n$ sudo apt install sox 実際の画面  今後 これでブラウザから子供の睡眠環境の管理がより進むことになる。たとえば温湿度センサから値を取得しブラウザに表示するなども良いだろうし、反町隆史アイコンをタップしたら POISON が流れても良いと思う。\nref. 反町「POISON」赤ちゃん泣き止む説　ＴＶ特集され反応「すごい」「POISONマジかよ」\nいや、我が娘は泣いてる時に POISON 聴かせるとマジで泣き止むし、寝るからな。敬意を込めて「タカシ」と呼ぶことにしてる。\n閑話休題、 Web で UI を作るのは慣れたことだし Python が動けば割合なんでも出来るので、ラズパイを使う上で自由度は上がると思う。\n","date":"2020-03-29","id":4,"title":"WebIOPi を使い Web ブラウザから Raspberry Pi 上で Python を実行する","url":"/post/webiopi_python/"},{"body":"前提 セットアップはこちらから。\n要件 0歳児は夜寝るのが早い。だいたい20時には寝ているが、親である我々はそんなに早く寝ることが出来ない。なので子供が寝ている暗い部屋の隣の明るい部屋で夕食を食っていたりするのだけど、最近寝返りをしてそのままうつ伏せで寝ることがあり、それはとても危険なので監視している必要がある（最悪死ぬ）。しかし部屋の仕切りを開放すると寝室が明るくなり眠りが浅くなるので、なるべく暗いままで監視がしたい。これは早めに解決したい課題なので、以下の最低限の機能を実現する（完成品買えば？）。\n 暗視カメラとして使用できる スマートフォン・PC から確認できる  カメラモジュール    Raspberry Pi に差し込めばすぐに使える。しかし冷静に考えたら高いな……（完成品買えば？）\nmjpg-streamer のインストール カメラの画像（静止画・動画）をストリーミング配信するツール。\n$ sudo apt-get -y cmake libv4l-dev libjpeg-dev imagemagick $ git clone https://github.com/jacksonliam/mjpg-streamer.git mjpg-streamer $ cd mjpg-streamer/mjpg-streamer-experimental $ make mjpg-streamer の起動 $ cd ~/mjpg-streamer/mjpg-streamer-experimental $ ./mjpg_streamer -o \u0026#34;./output_http.so -w ./www\u0026#34; -i \u0026#34;./input_raspicam.so -x 640 -y 480 -fps 30 -q 10\u0026#34; Raspberry Pi を起動するたびにこのコマンドを打っていても仕方ないので、/etc/rc.local の最終行 exit 0 の前に雑なコマンドを書いて起動時に実行されるようにしている。\ncd /home/pi/mjpg-streamer/mjpg-streamer-experimental/ \u0026amp;\u0026amp; ./mjpg_streamer -o \u0026#34;./output_http.so -w ./www\u0026#34; -i \u0026#34;./input_raspicam.so -x 640 -y 480 -fps 30 -q 10\u0026#34; ケースを作成 現代家庭生活であり余る資材とは段ボールのことだ。なのでこうなる。\n 一応天地の板は段ボールを90度ズラした状態で二重にしてある。排熱も必要だろうから密閉はしていない。\n光源 赤外線カメラなので赤外線を照射する必要がある。Amazon で適当に買った。強い赤外線を見つめ続けると白内障になる恐れがあるようで、たぶん神経質になるほどのものではないが、いちおう部屋の天井に向かって照射し、部屋全体に拡散するようにしている。\nブラウザからアクセス http://[ホスト名]:8080/?action=stream\n なお http://[ホスト名]:8080 にアクセスしたらその機能の全容は分かる。\n展望 せっかく寝室にラズパイを置くので、他に使いみちがあると思っている。例えば子供の安眠のためにホワイトノイズを流しているときにインターフォンに気付かないことがあるので、インターフォンを監視しているラズパイから通知が来たら寝室のラズパイがランプを光らせるとか（スマートフォンに通知すれば良いのだけど、寝かしつけ中は案外気付けない）、ありがちだけど環境監視とか。\n以下に書いていくことにする。\nラズパイでやりたいこと - tbsmcd のいろいろ\n","date":"2020-03-20","id":5,"title":"簡易ベビーモニター（赤外線対応）を Raspberry Pi で作った（ノーコード・ノー工具）","url":"/post/baby_monitor/"},{"body":"前提 作業環境は macOS Mojave\n本体は Raspberry Pi 3 model B\n➤ で始まるのは mac のターミナル、 $ で始めるのは Raspberry Pi のターミナル\n買ったもの 本体とストレージ      電源周り     USB 接続のキーボード、マウスなどは家に転がっているもので良い。\nOS(Raspbian) ダウンロード Download Raspbian for Raspberry Pi に3種類あり、大（デスクトップ環境に LibreOffice や多くの開発環境などいろいろ入ってる）中（デスクトップの環境……ブラウザや多少の開発環境がある）小（CUI）という感じ。今回は中（Raspbian Buster with desktop）を選んだ。ただしここから直接ダウンロードすると数時間かかるようだったので、国内のミラーからダウンロードした。\nRaspbianMirrors - Raspbian\n今回は JAIST を選択。\nmicroSD の準備 公式ドキュメントを参考に。\nフォーマット microSD を接続しターミナルで diskutil list\n➤ diskutil list /dev/disk0 (internal): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 251.0 GB disk0 1: EFI EFI 314.6 MB disk0s1 2: Apple_APFS Container disk1 250.7 GB disk0s2 /dev/disk1 (synthesized): #: TYPE NAME SIZE IDENTIFIER 0: APFS Container Scheme - +250.7 GB disk1 Physical Store disk0s2 1: APFS Volume Macintosh HD 73.7 GB disk1s1 2: APFS Volume Preboot 45.5 MB disk1s2 3: APFS Volume Recovery 510.4 MB disk1s3 4: APFS Volume VM 3.2 GB disk1s4 /dev/disk2 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *31.9 GB disk2 1: Windows_FAT_32 NO NAME 31.9 GB disk2s1 /dev/disk2 が microSD なので、新品なら多くの場合 FAT-32 になっているのでフォーマットの必要はないと思う（/dev/disk2 部分は、他のメディアを接続していたりすると変わる）。もしフォーマットする場合は以下の通り。\n➤ diskutil eraseDisk MS-DOS RP0 /dev/disk2 Started erase on disk2 Unmounting disk Creating the partition map Waiting for partitions to activate Formatting disk2s2 as MS-DOS (FAT) with name RP0 512 bytes per physical sector /dev/rdisk2s2: 61891008 sectors in 1934094 FAT32 clusters (16384 bytes/cluster) bps=512 spc=32 res=32 nft=2 mid=0xf8 spt=32 hds=255 hid=411648 drv=0x80 bsec=61921280 bspf=15111 rdcl=2 infs=1 bkbs=6 Mounting disk Finished erase on disk2 RP0 は自分で設定したデバイス名なので、任意で良い。\nイメージの書き込み microSD をアンマウントし、\n➤ diskutil umountDisk /dev/disk2 Unmount of all volumes on disk2 was successful ダウンロードしたイメージを書き込む（path は個々人の環境による）。\n➤ sudo dd bs=1m if=/path/to/2020-02-13-raspbian-buster.img of=/dev/rdisk2 conv=sync of=/dev/disk2 とした場合はバッファを通して書き込むのに対し、/dev/disk2 とした場合はバッファを通さないので早い（はず）。\neject はデスクトップから行った。\n本体を起動 イメージを書き込んだ microSD を Raspberry Pi に挿入し、電源用の Micro USB を挿せば起動する。ディスプレイ・キーボード・マウスも接続しておく。いまどきの Raspbian は設定ウィザードが充実しているので、求められる通りに設定していけば Wi-Fi の設定まで完了する。楽すぎる……\nSSH 接続 SSH 有効化 キーボードは接続したものの、ふだんから慣れているデバイスで操作したいというのが人類の性。なので SSH 接続できるようにする。 といっても、メニュー \u0026gt; 設定 \u0026gt; Raspberry Pi の設定 から\n とすれば有効になる。簡単。\nホスト名で接続 ついでにホスト名で接続したいので、まずはファイル編集用に Vim をインストール。Raspberry Pi のターミナルで\n$ sudo apt-get update $ sudo apt-get install vim /etc/hostname の編集\n$ sudo vim /etc/hostname rp0.local とする（rp0 は任意のホスト名に変更）。\n/etc/hosts の編集\n$ sudo vim /etc/hosts 127.0.1.1\trp0 を追加で書き込む(rp0は以下略)。\n一旦再起動したら、 mac のターミナルから\n➤ ssh pi@rp0.local とすればログインできる（rp0は）。\nリモートデスクトップの設定 Raspberry Pi に VNC サーバをインストール ここから追記 2020-03-20\n公式ドキュメント には RealVNC での接続方法が掲載されている。\nrealvnc-vnc-server のインストール\n$ sudo apt install realvnc-vnc-server インストールが完了すると、デスクトップのメニュー \u0026gt; 設定 \u0026gt; Raspberry Pi の設定 で VNC を有効にできる。未インストール状態ではラジオボタンが選択不可になる。\n macOS 側では VNC Viewer をインストールする必要がある。インストール後起動し、 IP アドレスかホスト名を入力すれば接続出来る。初回は Raspberry Pi 側のユーザ名（デフォルトは pi）とパスワード（セットアップ時に設定したもの）を求められる。\n こちらの方法が公式に案内・提供されているので、下記 tightvncserver を使う方法よりよいと思う。\nここまで追記 2020-03-20\n$ sudo apt-get install tightvncserver でインストールできるので、完了したら\n$ tightvncserver で起動できる。初回は VNC 用にパスワードを設定するよう要求されるので適切なものを設定する。\nmac から接続 Finder のメニューから 移動 \u0026gt; サーバへ接続 を選択し、\n （rp0はホスト名なので以下略）\n以上でひとまずの動作環境は出来た。\n","date":"2020-03-20","id":6,"title":"Raspberry Pi セットアップ 2020 春 ~ SSH + VNC 接続まで","url":"/post/raspberry_pi_setup/"},{"body":"Terms の昇順/降順 hugo の Terms ……このブログに於いては /tags/ と /archives/ について、通常のページでは辞書的に昇順で表示したいが、/archives/ については新しい順になるよう降順で表示したい。そこで /layouts/_default/terms.html を設定したのだけど、もっとスマートな書き方があるのではないかと迷っている。特に {{ if }} 〜 {{ else }} で重複して html を書いてるのどうかと思うんだよなあ……\n{{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;ul class=\u0026#34;terms\u0026#34;\u0026gt; {{ if eq .Title \u0026#34;Archives\u0026#34; }} {{ range .Data.Terms.Alphabetical.Reverse }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Page.RelPermalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt; ({{ .Count }}) \u0026lt;/li\u0026gt; {{ end }} {{ else }} {{ range .Data.Terms }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Page.RelPermalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt; ({{ .Count }}) \u0026lt;/li\u0026gt; {{ end }} {{ end }} \u0026lt;/ul\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} ","date":"2020-03-09","id":7,"title":"Archives だけ降順にしたい","url":"/post/sort_term/"},{"body":"  成果物  /search/  生の html を書きたい hugo では Markdown を使う。一般的な Markdown では html を混在して書けるが、 hugo では以下のようになる。\nindex.md\n\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;/img.jpg\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; ↓ index.html\n\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;/img.jpg\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; このように p タグで囲われた状態で出力されるため、たとえば Amazon のアフィリエイトを貼り付けると無駄な改行が入ってしまう。このままでは JavaScript でページを作る上で多少の不都合がある（表現が自由ではない）ので、生の html を出力する shortcode を作成する。\n/layouts/shortcodes/raw.html\n{{ .Inner }} このように使える。\n参照: Simple Shortcode to Insert Raw HTML in Hugo · Ana Ulin\nindex.json を出力する 今回は How to make a client-side search engine with Vue.js and Lunr.js - Fabio Franchino の方法をパク踏襲して、まずは動かしてみる。リンク先のコードにおいて axios で読み込む json に相当する情報を hugo で出力する必要があるので、それを index.json とする。 /layouts/_default/index.json に layout を、config.toml に設定を追加すれば index.xml (RSS)のように出力することが出来る。\n/layouts/_default/index.json\n{{ $items := slice }} {{ $counter := 0 }} {{ range .Site.RegularPages }} {{ if in .Permalink \u0026quot;/post/\u0026quot; }} {{ $counter = add $counter 1 }} {{ $date := .Date.Format \u0026quot;2006-01-02\u0026quot; }} {{ $items = $items | append (dict \u0026quot;id\u0026quot; $counter \u0026quot;title\u0026quot; .Title \u0026quot;body\u0026quot; .Plain \u0026quot;url\u0026quot; .Permalink \u0026quot;date\u0026quot; $date) }} {{ end }} {{ end }} {{ $items | jsonify }} 単純に slice として定義した $items にページの内容を dict として追加していっている。id は今回のソースでは使用するというだけで、別に url を同じく用いてもよいだろうと思う（検証はしていないが）。何も考えず全ページを追加すると /profile/ や /search/ 自身まで対象となるので、リンクに /post/ が含まれるページだけという条件をつけている（if in .Permalink \u0026quot;/post/\u0026quot;）。最終行ではループで組み立てた $items を jsonfy で json 化して出力している。\n同じようなことを解説しているページで .Scratch を使っているパターンがあるが、このように単一ページで用いるだけの変数には必要のないと思う。ドキュメントには allow for writable page- or shortcode-scoped variables. とある。スコープをまたぐときに使うように読めるが、今回は関係ない。物事はシンプルに記述したほうが良いだろう。\nまた config.toml にはこのように。\n[outputs] home = [\u0026quot;html\u0026quot;, \u0026quot;json\u0026quot;, \u0026quot;rss\u0026quot;] 検索ページを設置する search.md\n https://github.com/tbsmcd/tbsmcd.github.io/blob/ed52a5bca0f828d3c046bef2bdc3577d3150c38e/content/search.md  lunr.js はここから、lunr.stemmer.support.js tinyseg.js lunr.ja.js はここからダウンロードする。\nsearch.js\n https://github.com/tbsmcd/tbsmcd.github.io/blob/ed52a5bca0f828d3c046bef2bdc3577d3150c38e/static/js/search.js  検索対象が本文とタイトルなので、そのように指定している。\nlunr-languages の README では多言語に対応する方法として\nthis.use(lunr.multiLanguage('en', 'ru')); と書かれているのだが、同じように日本語を、例えば 'en', 'ja' のように指定しても希望通り動かない（英語だけが有効になる）。これは既知の問題のようだ。\n \u0026ldquo;multiLanguage\u0026rdquo; method doesn't work with Japanese. #45 · MihaiValentin/lunr-languages  そのため今回は this.use(lunr.ja) と日本語だけを検索するよう書いたのだが、もちろん多言語対応していないので次は英単語の resource などを検索できない問題が生じる。そのため姑息的対処として this.resuls = this.searchIndex.search(*${this.search}*) でワイルドカードで検索できるようにした。これで resource なども検索できるのだが、ならばいっそ lunr を使わず Vue だけで検索を作っても良いのではないかという気にもなる…… lunr-languages に貢献するのがいちばん良いのかな。\n以上で検索ページは実現できる。\n今後  全記事を表示してから絞り込み検索するのはページ増えたときに……  ページが増えたときに考えましょう   全記事を json で吐き出すのは……  ページが増えたときに考えましょう    ","date":"2020-03-06","id":8,"title":"Vue.js + lunr.js を使い hugo サイトに全文検索を追加する","url":"/post/added_search/"},{"body":"在宅勤務5週目 新型コロナウイルス感染症（COVID-19）対策としておれが所属する GMO ペパボは東京・福岡で在宅勤務を継続していて、すでに1ヶ月以上出社していない。いわゆるGMO 増田などあったが、まあ実際のところはテックブログ等を読んでもらえば分かるだろう。\n GMO ペパボのリモートワーク状況 2020 - ペパボテックブログ ペパボのパートナーの自宅作業デスクまとめ - ペパボテックブログ  運動不足問題 おれは普段5km程度を自転車で出勤し、オフィスではコーヒーを注いだりトイレに行ったりミーティングをしたりとある程度は歩き、また5km程度を自転車で帰るという生活を送っていた。在宅勤務になるとこれらはほとんど失われる。ジムには定期的に通っているものの（しかしそれも厳しくなりそう）、日常的な運動量が減るのは痛い。だから最近は積極的に散歩をするようにしている。\n散歩は娘（4ヶ月半）を抱っこひもで連れていく。昼休みや退勤後に、安全な道を7kg弱の負荷をかけて歩く。これがなかなか楽しいし役にも立つ。\n三方良し このぐらいの子供は自分で上手く寝ることが出来ない。娘も日によっては昼寝が満足に出来ず、そのせいで逆に夜寝れないなんてことがある。そういうときに抱っこひもで連れて歩くとよく昼寝が出来て、娘の満足度は高い（と勝手に思っている）。妻は妻で日中娘に掛かりきりなので一人の時間が出来ることはありがたいようだ。家族全体としても夜に娘が寝付きやすければありがたい。そしておれ自身も運動量が増えて、娘と触れ合う時間が増えれば楽しい。在宅勤務といえども勤務中は業務遂行に専念すべきなので、娘とのまとまった時間が取れるのはとても良い。 三方良し、これが近江商人の精神である。\n「世間に良し」。まあ、良いんじゃないかな。\n","date":"2020-02-27","id":9,"title":"子を連れて散歩する（三方良し）","url":"/post/walking/"},{"body":"なぜいまさら hugo で画像を最適化（リサイズ）して出力したのときに画像を /static/images/ から /content/post/[各記事]/ 以下に移動させたわけだが、完全に OGP タグのことを忘れていた。\n変更点 /layouts/partials/head_custom.html\n\u0026lt; \u0026lt;meta property=\u0026quot;og:image\u0026quot; content=\u0026quot;{{if .Params.image}}https://tbsmcd.net{{.Params.image}}{{else}}https://tbsmcd.net/images/icon_mono.jpg{{end}}\u0026quot; /\u0026gt; --- \u0026gt; {{ if .Params.image }} \u0026gt; {{ $src := .Params.image }} \u0026gt; {{ $resource := .Page.Resources.GetMatch $src }} \u0026gt; \u0026lt;meta property=\u0026quot;og:image\u0026quot; content=\u0026quot;https://tbsmcd.net{{ $resource.Permalink }}\u0026quot; /\u0026gt; \u0026gt; {{ else }} \u0026gt; \u0026lt;meta property=\u0026quot;og:image\u0026quot; content=\u0026quot;https://tbsmcd.net/images/icon_mono.jpg\u0026quot; /\u0026gt; \u0026gt; {{ end }} 記事ディレクトリ直下にある画像のうち OGP に使いたいファイル名を index.md のメタデータ部分に image: \u0026quot;hoge.jpg\u0026quot; と書いておけば展開される。image: \u0026quot;hoge.jpg\u0026quot; がない場合はデフォルトの画像が表示される。記事直下にない画像ファイルを指定した場合はビルドでエラーになるので気付くことができる。\n","date":"2020-02-23","id":10,"title":"OGP イメージに resource を使う","url":"/post/ogp_using_resource/"},{"body":"   通っているジムが3月から24時間営業になる。入退館管理には Raspberry Pi が使われるようだ。こういうシステムを導入する場合、ハードウェアごと借りるパケージになっていそうだけど、そうではないのかな？いずれにせよハックしてる感じがしてワクワクする。ジムの人が DIY しているとまでは思っていないけど。\n","date":"2020-02-23","id":11,"title":"ハッカブル・ジム","url":"/post/hackable_gym/"},{"body":"  安倍晋三が2018年の記者会見で述べた言葉に「信なくば立たず」がある。これは『論語』顔淵第十二の七にある「民無信不立（民信なくんば立たず）」のことだ。論語を引くほどだから、儒教を「中国思想だから」と否定する偏狭なウヨク連中とは違うのだろう。 さて、次のような一節が論語にはある。\n子路曰、衞君待子而爲政、子將奚先、子曰、必也正名乎、子路曰、有是哉、子之迂也、奚其正、子曰、野哉由也、君子於其所不知、蓋闕如也、名不正則言不順、言不順則事不成、事不成則禮樂不興、禮樂不興則刑罰不中、刑罰不中則民無所錯手足、故君子名之必可言也、言之必可行也、君子於其言、無所苟而已矣、\n金谷治 訳註 『論語』岩波文庫より子路第十三の三\n「名と実があってないと言葉も順当でなく（略）君子は言葉をいい加減にしてはならない」極めて簡潔かつ真っ当な論理であるし、論語の中では解釈も文法も簡単な方だ。記者会見で論語を引用するような安倍晋三であれば、きっとこれも心に留めてるんだろうなとは思う。もっとも、彼が格好をつけて読みもしない論語を引いていなければだけど。もしくは、彼が言葉を理解できていたらだけど。\n なお、小泉進次郎環境大臣の父君もこの言葉を座右の銘としていたらしい。反省はしているが反省が反省と反省に……よく分からないので、父上に言葉の意味を訊いてきて欲しい。父上も……理解してなかったのかもな。\n\n","date":"2020-02-21","id":12,"title":"安倍晋三は論語を読んだのか？もしくは言葉を理解できているのか？","url":"/post/shiro_13_3/"},{"body":"ブログを軽くしたい 林田ドットオンラインというまあまあ狂ったブログがあり、これはペパボの同僚の手になるものだけど、とにかく異常に軽い。WordPress でこれだけ軽いのだから、 hugo ならもっと軽くなるはず。なのでこのブログも軽量路線で行こうという話。\nなにはともあれ画像がデカい 大きければ転送に時間がかかる。これは古代エジプトの時代から不変の原理であり、当時は巨石を丸太のコロを使っただとか、ソリを使っただとか、いずれにせよ重いものを運ぶのには力か工夫が必要である。幸い2020年代を生きている我々は、巨石を運ぶ古代エジプト労働者やイースター島モアイ建造従事者とは違い、ファイルを圧縮したり画像自体の表示領域を小さくすることが許されている。逆に労働の合間にビールを飲むことは許されてはいないが、ここは素直に軽くする方向で行きたい。\nhugo における画像リサイズ 参照\n Image Processing | Hugo Page Resources | Hugo  上の記事を読むと、画像を Page Resource として扱うようにすると画像はリサイズできることがわかる。\nResource として扱う？ 従来\n├── content │ ├── _index.md │ ├── post │ │ ├── added_archives.md │ │ ├── added_favicon.md │ │ ├── hello.md │ │ ├── index_md_is_useful.md │ │ ├── my_desk.md │ │ ├── reading_card.md │ │ ├── reading_card_addition.md │ │ ├── studio_alice.md │ │ └── syntax_highlighting.md │ └── profile.md （略） ├── static │ ├── images │ │ ├── desk.JPG │ │ ├── icon_gen.jpg │ │ ├── icon_mono.jpg │ │ ├── reading_card.jpg │ │ └── studio.jpg 変更後\n├── content │ ├── _index.md │ ├── post │ │ ├── added_archives │ │ │ └── index.md │ │ ├── added_favicon │ │ │ ├── icon_gen.jpg │ │ │ ├── icon_mono.jpg │ │ │ └── index.md │ │ ├── hello │ │ │ └── index.md │ │ ├── index_md_is_useful │ │ │ └── index.md │ │ ├── my_desk │ │ │ ├── desk.JPG │ │ │ └── index.md │ │ ├── reading_card │ │ │ ├── card.jpg │ │ │ └── index.md │ │ ├── reading_card_addition │ │ │ └── index.md │ │ ├── studio_alice │ │ │ ├── index.md │ │ │ └── studio.jpg │ │ └── syntax_highlighting │ │ └── index.md │ └── profile.md という感じでまずは画像を記事ごとに保持する。そうすると画像を Resource として扱えるようになり、Image Processing が使えるようになる。\nshortcode 以下のような shortcode を用意する\n/layouts/shortcodes/img800x.html\n{{ $src := .Get \u0026#34;src\u0026#34; }} {{ $original := .Page.Resources.GetMatch $src }} {{ if $original }} {{ $resized := $original.Resize \u0026#34;800x q90\u0026#34; }} \u0026lt;a href=\u0026#34;{{ $original.RelPermalink }}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ $resized.RelPermalink }}\u0026#34; alt=\u0026#34;{{ .Get \u0026#34;alt\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; {{ end }} Resize \u0026quot;800x\u0026quot; の部分で幅800を指定している。例えば幅400縦200の画像なら Resize \u0026quot;400x200\u0026quot; だし、縦300の画像なら Resize \u0026quot;x300\u0026quot; となる。q90 というのは jpeg のクオリティ。このあたりは上記公式ドキュメントを読めば分かるだろう。\n……と、このような shortcode を用意し、*.md の中でファイル名と同名で呼べば良い。\n例えばこんな感じで\nshortcode の解説は後日別記事で行う（かもしれない）（いま酒飲んでて後のことはよく分からない）（期待しないで）。\n実際にこの作業をおこなった記事 これとかこれとか。\n画像の再配置は全ページについて行った。\n補足 OGP タグについてはこちら\n","date":"2020-02-21","id":13,"title":"hugo で画像を最適化して出力する","url":"/post/image_processing/"},{"body":"元画像の準備  Twitter などで使っているアイコンを白黒で作り直した。今回は Piskel を利用した。\nfavicon 化   Favicon \u0026amp; App Icon Generator を利用した。サイト名から分かるとおり、 favicon だけではなくスマートフォン用の App Icon も作成してくれるし、画像のように \u0026lt;head\u0026gt; 内のコードまで用意してくれるから頭を使わなくて良い。\nHead にコードを追加 hugo ではテーマの layout 以下にあるファイルよりブログの layout 以下の同名ファイルが優先して利用される1。通常 \u0026lt;head\u0026gt; 内を変更したい場合はテーマの layout/partials/header.html をコピーし、ブログのディレクトリに同名で保存して編集すれば良い。このブログで使っているテーマは少し事情が違い header.html 内で空の header_custom.html を読み込むようになっているので、今回は favicon 用のコードを書いた head_custom.html をブログの同一 path に設置した。\n  hugo の layout の優先順位については公式ドキュメント参照のこと。 \u0026#x21a9;\u0026#xfe0e;\n   ","date":"2020-02-16","id":14,"title":"hugo に favicon を追加したメモ","url":"/post/added_favicon/"},{"body":"参照 Scrapbox で読書カードを作ってみる | tbsmcd\n要約→項目カード, 要約→読書カードという順番について 書籍によって向き・不向きがあるはずなのだが、それを無視してしまった。今回『エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング』を題材に始めたのだが、本書は幅広い知識の総覧としての性質をもつ。この場合当然に要約から項目カードが作り出せるし、要約からこそ全体像を描ける。しかし特定の分野を深く掘るような書籍の場合は読書カードから項目カードを作るやり方が向いているのかもしれない。\n『読書家の新技術』について 古書店に注文したものがようやく届いた。今夜から読んでいこうと思う。\n\n\n","date":"2020-02-15","id":15,"title":"Scrapbox で読書カードを作ってみる 補足","url":"/post/reading_card_addition/"},{"body":"  読書カードとは 学生の頃に読んだ呉智英『読書家の新技術』をいま思い出した。本書技術編には読書カードの作り方が書かれている。読書カードとはその本の全体像を書き、あとで読み返すときに参考にするもの。読書カードが溜まったら項目カードを作る。項目カードはいわば個人的な索引で、その項目のカードを見れば言及している本を探せるようになる。 これが読書カードの概要であるが、かつて読んだ『読書家の新技術』文庫は手元になく北大恵迪寮のどこかに埋もれているはずで、この記述の正確性は担保できない（いまから中古を注文する→注文した！）。\n\n自分なりの応用法 本書の読書カードは手書き時代のものだ。デジタル化により検索性と編集容易性が共に向上した現在においてはアップデートされるべきアイデアだと思う。今回の試みではラフとしてまずチャプター/章ごとに要約を作っていく。要約を作る際に項目カード化しそうな語については #エンジニアリング のような形式で書いておく。Scrapbox においてはハッシュタグのリンク先はページ化されるので、あとで埋めていけば良いだろう。埋めるまでもなければハッシュを削除する。\nリンク  tbsmcd の読書メモ  まずは『エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング』（広木大地）を題材に。\n補足あり\n\n","date":"2020-02-10","id":16,"title":"Scrapbox で読書カードを作ってみる","url":"/post/reading_card/"},{"body":"  🤔\n プロすごい 写真論とか撮影技術とか分からないけど、上機嫌とはいえない0歳児からどうにか引き出した0.1秒の笑顔を切り取る技術は子供専門スタジオだからこそだし、撮影しているさまを見るだけでも十分面白く勉強にもなったので、あれには財布の紐も緩むというもの。\n各所から頂いた出産祝で払いました……\n","date":"2020-02-09","id":17,"title":"スタジオアリスの撮影料（3000円）無料券をもらったので行った","url":"/post/studio_alice/"},{"body":"  あまりきれいでもないし整理もされていない ペパボのパートナーの自宅作業デスクまとめ - ペパボテックブログ\nデスク環境さらしなどをやっていると「きれいに整理されてるけど、写真を取るときに片付けたんでしょ？」みたいな反応があって、まあそりゃ人間自身も100%普段着で写真に写る必要もないわけだから「机だって同じだよ」と言いたくなるのだけど、とにかく敢えて普段どおりの雑然とした机の写真を撮ってみた。\n机の上や周りににあるもの 技術書無いの？ 技術書は本棚にあるか、電子書籍で買っている。最近は電子書籍が多い。机の上にある本についてはいま大切だと思っている本を置いている。\n        市バスのりば 神戸市交通局で買え(る|た)もの。気に入っていていまだ開封せずに使っている。\n音 ヤマハのスピーカーと FX-AUDIO のデジタルアンプ。金属ラックにスピーカーを置くのは禁忌だけど、アンカー代わりにコンクリートブロック（モノタロウで買った）を置き、ゴムシートを敷くことで空中に擬似的に強固な地盤を作れたと思う。\nG-レコ BD 本体より絵コンテ集の方がデカい。絵コンテが本体。\nヘッドセット ミーティングをオンラインで行うときにとても便利。\n椅子 あ、いちおう椅子はオカモトのバロンの中古で、送料込みで2万円。ただし自分で修理ができる人向けではある。\n","date":"2020-02-06","id":18,"title":"テックブログに載らない作業環境","url":"/post/my_desk/"},{"body":"こういう感じ \u0026lt;?php class SimpleClass { // プロパティの宣言  public $var = \u0026#39;a default value\u0026#39;; // メソッドの宣言  public function displayVar() { echo $this-\u0026gt;var; } } コードは PHP: クラスの基礎 - Manual  より\nテーマの編集 対応する Pull Request\nAdd syntax highlighting #1\nシンタックスハイライト用の CSS を生成する。コマンドはこちらを参照のこと。/ style-name はここから好きなものを選べば良い。今回は manni を選んだ。\n$ hugo gen chromastyles --style [style-name] \u0026gt; code.css ついでにインラインコードの背景を manni と合わせた。\n生成した CSS を static/css/ 以下に配置し、html から読み込みために header を編集する。\nローカルでビルドする場合はブログのソースに CSS を追加すれば良いと思う。今回は Github Actions でビルドしているため、テーマの方に追加した。その場合でもテーマに追加せず、ビルドスクリプト上で配置することも出来ると思う。\nconfig.toml の編集 対応する Pull Request\nシンタックスハイライト適用 #5\n# シンタックスハイライトを有効に pygmentsUseClasses = true # github 風に ``` で囲む pygmentsCodefences = true ついでにシンタックスハイライト無しの pre の背景色も合わせた。\naaa あああ おわりに ようやくコードを書けるようになった。余計な装飾はいらないが、必要な機能は欲しいというわがままな欲求はこうやって叶えていく。本筋とは関係ないが Github で管理すると機能追加した P/R をブログに載せれるので便利。\n","date":"2020-02-05","id":19,"title":"hugo でシンタックスハイライトを追加した","url":"/post/syntax_highlighting/"},{"body":"変更点 対応する Pull Request\nアーカイブを追加 #4\nただし後述の通り、日付フォーマットには 2006-01 を使う。\n簡単な説明  footer は config.toml で定義しているので変更 すでにあるページには追記する必要があるので手動で変更  archives: [\u0026quot;2020-02\u0026quot;] 記事が2つしか無かったので手動だったが、多ければスクリプトを書く必要がありそう   config.toml に [taxonomies] を追加 archetypes に archives: [\u0026quot;{{ dateFormat \u0026quot;2020-02\u0026quot; .Date }}\u0026quot;] を追加したが、このフォーマットに対応していないのか3030年とかになる  archives: [\u0026quot;2020-02\u0026quot;] のように決め打ちしといても間違いはなさそう  修正 \u0026amp;\u0026amp; 追記  archives: [\u0026quot;{{ dateFormat \u0026quot;2006-01\u0026quot; .Date }}\u0026quot;] としたら問題がなかった ドキュメントで使用されている日付(2006/01/02)を採用したら問題は起きない        ","date":"2020-02-03","id":20,"title":"Archives ページを導入した","url":"/post/added_archives/"},{"body":"前提 自分のブログはなるべく装飾のないものにしたかったので hugo-xminを採用した(注: その後フォークしたものを使うことに)。ヘッダも余計なものに見えたので削除している。しかし Home はある程度情報を追加したいというわがままな欲求がある。\nやったこと xmin のサンプルサイトの HUGO XMIN から usage of this theme. の部分は content/_index.markdown に書かれているようだ。とりあえず拡張子を .md に変更して自分でも追加してみた。\n結果 すごくどうでもいいことを書ける場所が出来た。いらないものはいらないが、欲しいものは欲しいので便利。自前で新しいテーマ（github の markdown に適用される CSS でも使おうかと……）を作ろうとしていたが、その必要はなくなった。\n","date":"2020-02-02","id":21,"title":"hugo-xmin で `_index.md` を設定すると便利だった","url":"/post/index_md_is_useful/"},{"body":"使用したもの  hugo GitHub Actions による GitHub Pages への自動デプロイ hugo-xmin  上記をフォークしたものに変更 2020-02-03  MIT ライセンスの賜物     ムームードメイン  ","date":"2020-02-02","id":22,"title":"ブログを作り直した","url":"/post/hello/"}]